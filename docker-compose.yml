networks:
  traefik:
    external: true
    name: traefik
  internal:
    driver: bridge

volumes:
  n8n_data:
    driver: local
  postgres_data:
    driver: local

secrets:
  cf_api_token:
    file: ./secrets/cf_api_token
  postgres_password:
    file: ./secrets/postgres_password

services:
  traefik:
    image: traefik:${TRAEFIK_IMAGE_TAG:-v3.0}
    container_name: ${TRAEFIK_CONTAINER_NAME:-traefik}
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "${TRAFIK_HTTP_PORT:-80}:80"
      - "${TRAFIK_HTTPS_PORT:-443}:443"
    networks:
      - traefik
    environment:
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=${TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL}
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cf_api_token
      - DASHBOARD_HOST=${DASHBOARD_HOST} 
    secrets:
      - cf_api_token
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/middlewares.yml:/etc/traefik/config/middlewares.yml:ro
      - ${TRAFIK_LETSENCRYPT_PATH:-./letsencrypt}:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`${DASHBOARD_HOST}`)"  
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"

  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: n8n
      POSTGRES_DB: n8n
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n -d n8n"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    restart: unless-stopped
    networks:
      - internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  n8n:
    image: ${N8N_IMAGE}
    container_name: ${N8N_CONTAINER_NAME}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - traefik
      - internal
    environment:
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=${N8N_PORT}
      - N8N_PROTOCOL=${N8N_PROTOCOL}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD_FILE=/run/secrets/postgres_password
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - N8N_SECURE_COOKIE=true
      - N8N_BASIC_AUTH_ACTIVE=false
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
      - GENERIC_TIMEZONE=${TZ}
      - N8N_EDITOR_BASE_URL=https://${N8N_HOSTNAME}
        
    volumes:
      - n8n_data:/home/node/.n8n
    secrets:
      - postgres_password
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${N8N_HOSTNAME}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.n8n.middlewares=retry@file"




