services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:${TRAEFIK_IMAGE_TAG:-v3.0}
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    ports:
      - "80:80"
      - "443:443"
    environment:
      CF_DNS_API_TOKEN_FILE: /run/secrets/cf_api_token
      TRAEFIK_DASHBOARD_CREDENTIALS: ${TRAEFIK_DASHBOARD_CREDENTIALS}
    secrets:
      - cf_api_token
    env_file:
      - .env
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik_config/traefik.yml:/traefik.yml:ro
      - ./traefik_config/acme.json:/acme.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-http.entrypoints=http"
      - "traefik.http.routers.traefik-http.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.traefik-http.middlewares=traefik-https-redirect@docker"
      - "traefik.http.routers.traefik-secure.entrypoints=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.traefik-secure.middlewares=traefik-auth@docker,secure-headers@docker"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-secure.tls.domains[0].main=${TRAEFIK_HOSTNAME}"
      - "traefik.http.routers.traefik-secure.service=api@internal"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_CREDENTIALS}"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.permanent=true"
      - "traefik.http.middlewares.secure-headers.headers.stsSeconds=604800"
      - "traefik.http.middlewares.secure-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.secure-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.secure-headers.headers.referrerPolicy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.secure-headers.headers.contentSecurityPolicy=default-src 'self' https: data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: https:; font-src 'self' https: data:; connect-src 'self' wss://${N8N_HOSTNAME} https:; frame-ancestors 'none'; object-src 'none'; base-uri 'self';"
      - "traefik.http.middlewares.secure-headers.headers.permissionsPolicy=geolocation=(), midi=(), microphone=(), camera=(), magnetometer=(), gyroscope=(), speaker=(), payment=()"
      - "traefik.http.middlewares.secure-headers.headers.customResponseHeaders.Server="
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5

  n8n:
    image: n8nio/n8n:${N8N_VERSION:-latest}
    container_name: n8n
    restart: unless-stopped
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${N8N_POSTGRES_DB:-n8n}
      DB_POSTGRESDB_USER: ${N8N_POSTGRES_USER:-n8nuser}
      DB_POSTGRESDB_PASSWORD_FILE: /run/secrets/postgres_password
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD_FILE: /run/secrets/redis_password
      EXECUTIONS_MODE: queue
      QUEUE_HEALTH_CHECK_ACTIVE: "true"
      N8N_HOST: ${N8N_HOSTNAME}
      N8N_PORT: 5678
      N8N_PROTOCOL: https
      WEBHOOK_URL: https://${N8N_HOSTNAME}/
      NODE_ENV: production
      GENERIC_TIMEZONE: ${TZ}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - proxy
      - n8n_internal
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n-http.entrypoints=http"
      - "traefik.http.routers.n8n-http.rule=Host(${N8N_HOSTNAME})"
      - "traefik.http.routers.n8n-http.middlewares=traefik-https-redirect@docker"
      - "traefik.http.routers.n8n-secure.entrypoints=https"
      - "traefik.http.routers.n8n-secure.rule=Host(${N8N_HOSTNAME})"
      - "traefik.http.routers.n8n-secure.middlewares=secure-headers@docker"
      - "traefik.http.routers.n8n-secure.tls=true"
      - "traefik.http.routers.n8n-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.n8n-secure.service=n8n-svc"
      - "traefik.http.services.n8n-svc.loadbalancer.server.port=5678"
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:5678/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - cf_api_token
      - postgres_password
      - redis_password

  postgres:
    image: postgres:${POSTGRES_VERSION:-15}-alpine
    container_name: n8n_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${N8N_POSTGRES_USER:-n8nuser}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: ${N8N_POSTGRES_DB:-n8n}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - n8n_internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${N8N_POSTGRES_USER:-n8nuser} -d ${N8N_POSTGRES_DB:-n8n}"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - postgres_password

  redis:
    image: redis:${REDIS_VERSION:-7}-alpine
    container_name: n8n_redis
    restart: unless-stopped
    command: ["sh", "-c", "redis-server --save 60 1 --loglevel warning --requirepass $(cat /run/secrets/redis_password)"]
    volumes:
      - redisdata:/data
    networks:
      - n8n_internal
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -a $(cat /run/secrets/redis_password) ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - redis_password

secrets:
  cf_api_token:
    file: ./cf_api_token.txt
  postgres_password:
    file: ./postgres_password.txt
  redis_password:
    file: ./redis_password.txt

networks:
  proxy:
    external: true
  n8n_internal:
    driver: bridge

volumes:
  n8n_data:
  pgdata:
  redisdata:

